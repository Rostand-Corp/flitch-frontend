/* tslint:disable */
/* eslint-disable */
/**
 * Web
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ChatType } from './ChatType';
import {
  ChatTypeFromJSON,
  ChatTypeFromJSONTyped,
  ChatTypeToJSON,
} from './ChatType';
import type { ChatUserBriefResponse } from './ChatUserBriefResponse';
import {
  ChatUserBriefResponseFromJSON,
  ChatUserBriefResponseFromJSONTyped,
  ChatUserBriefResponseToJSON,
} from './ChatUserBriefResponse';
import type { MessageResponse } from './MessageResponse';
import {
  MessageResponseFromJSON,
  MessageResponseFromJSONTyped,
  MessageResponseToJSON,
} from './MessageResponse';

/**
 *
 * @export
 * @interface ChatFullResponse
 */
export interface ChatFullResponse {
  /**
   *
   * @type {string}
   * @memberof ChatFullResponse
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof ChatFullResponse
   */
  creatorId?: string | null;
  /**
   *
   * @type {string}
   * @memberof ChatFullResponse
   */
  creatorName?: string | null;
  /**
   *
   * @type {string}
   * @memberof ChatFullResponse
   */
  name?: string | null;
  /**
   *
   * @type {ChatType}
   * @memberof ChatFullResponse
   */
  type?: ChatType;
  /**
   *
   * @type {Array<ChatUserBriefResponse>}
   * @memberof ChatFullResponse
   */
  participants?: Array<ChatUserBriefResponse> | null;
  /**
   *
   * @type {Array<MessageResponse>}
   * @memberof ChatFullResponse
   */
  messages?: Array<MessageResponse> | null;
}

/**
 * Check if a given object implements the ChatFullResponse interface.
 */
export function instanceOfChatFullResponse(value: object): boolean {
  let isInstance = true;

  return isInstance;
}

export function ChatFullResponseFromJSON(json: any): ChatFullResponse {
  return ChatFullResponseFromJSONTyped(json, false);
}

export function ChatFullResponseFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): ChatFullResponse {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    creatorId: !exists(json, 'creatorId') ? undefined : json['creatorId'],
    creatorName: !exists(json, 'creatorName') ? undefined : json['creatorName'],
    name: !exists(json, 'name') ? undefined : json['name'],
    type: !exists(json, 'type') ? undefined : ChatTypeFromJSON(json['type']),
    participants: !exists(json, 'participants')
      ? undefined
      : json['participants'] === null
      ? null
      : (json['participants'] as Array<any>).map(ChatUserBriefResponseFromJSON),
    messages: !exists(json, 'messages')
      ? undefined
      : json['messages'] === null
      ? null
      : (json['messages'] as Array<any>).map(MessageResponseFromJSON),
  };
}

export function ChatFullResponseToJSON(value?: ChatFullResponse | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    creatorId: value.creatorId,
    creatorName: value.creatorName,
    name: value.name,
    type: ChatTypeToJSON(value.type),
    participants:
      value.participants === undefined
        ? undefined
        : value.participants === null
        ? null
        : (value.participants as Array<any>).map(ChatUserBriefResponseToJSON),
    messages:
      value.messages === undefined
        ? undefined
        : value.messages === null
        ? null
        : (value.messages as Array<any>).map(MessageResponseToJSON),
  };
}

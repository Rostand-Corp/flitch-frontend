/* tslint:disable */
/* eslint-disable */
/**
 * Web
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ChatUserMinimalNoChatResponse } from './ChatUserMinimalNoChatResponse';
import {
  ChatUserMinimalNoChatResponseFromJSON,
  ChatUserMinimalNoChatResponseFromJSONTyped,
  ChatUserMinimalNoChatResponseToJSON,
} from './ChatUserMinimalNoChatResponse';
import type { MessageReplyResponse } from './MessageReplyResponse';
import {
  MessageReplyResponseFromJSON,
  MessageReplyResponseFromJSONTyped,
  MessageReplyResponseToJSON,
} from './MessageReplyResponse';
import type { MessageType } from './MessageType';
import {
  MessageTypeFromJSON,
  MessageTypeFromJSONTyped,
  MessageTypeToJSON,
} from './MessageType';

/**
 *
 * @export
 * @interface MessageResponse
 */
export interface MessageResponse {
  /**
   *
   * @type {string}
   * @memberof MessageResponse
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof MessageResponse
   */
  chatId?: string;
  /**
   *
   * @type {ChatUserMinimalNoChatResponse}
   * @memberof MessageResponse
   */
  sender?: ChatUserMinimalNoChatResponse;
  /**
   *
   * @type {MessageReplyResponse}
   * @memberof MessageResponse
   */
  inReplyTo?: MessageReplyResponse;
  /**
   *
   * @type {MessageType}
   * @memberof MessageResponse
   */
  type?: MessageType;
  /**
   *
   * @type {string}
   * @memberof MessageResponse
   */
  content?: string | null;
  /**
   *
   * @type {Date}
   * @memberof MessageResponse
   */
  timestamp?: Date;
}

/**
 * Check if a given object implements the MessageResponse interface.
 */
export function instanceOfMessageResponse(value: object): boolean {
  let isInstance = true;

  return isInstance;
}

export function MessageResponseFromJSON(json: any): MessageResponse {
  return MessageResponseFromJSONTyped(json, false);
}

export function MessageResponseFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): MessageResponse {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    chatId: !exists(json, 'chatId') ? undefined : json['chatId'],
    sender: !exists(json, 'sender')
      ? undefined
      : ChatUserMinimalNoChatResponseFromJSON(json['sender']),
    inReplyTo: !exists(json, 'inReplyTo')
      ? undefined
      : MessageReplyResponseFromJSON(json['inReplyTo']),
    type: !exists(json, 'type') ? undefined : MessageTypeFromJSON(json['type']),
    content: !exists(json, 'content') ? undefined : json['content'],
    timestamp: !exists(json, 'timestamp')
      ? undefined
      : new Date(json['timestamp']),
  };
}

export function MessageResponseToJSON(value?: MessageResponse | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    chatId: value.chatId,
    sender: ChatUserMinimalNoChatResponseToJSON(value.sender),
    inReplyTo: MessageReplyResponseToJSON(value.inReplyTo),
    type: MessageTypeToJSON(value.type),
    content: value.content,
    timestamp:
      value.timestamp === undefined ? undefined : value.timestamp.toISOString(),
  };
}

/* tslint:disable */
/* eslint-disable */
/**
 * Web
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  AuthLoginPost401Response,
  ForgotPassModel,
  JwtResult,
  LoginModel,
  RegisterModel,
  ResetForgotPassModel,
  ResetPassModel,
} from '../models';
import {
  AuthLoginPost401ResponseFromJSON,
  AuthLoginPost401ResponseToJSON,
  ForgotPassModelFromJSON,
  ForgotPassModelToJSON,
  JwtResultFromJSON,
  JwtResultToJSON,
  LoginModelFromJSON,
  LoginModelToJSON,
  RegisterModelFromJSON,
  RegisterModelToJSON,
  ResetForgotPassModelFromJSON,
  ResetForgotPassModelToJSON,
  ResetPassModelFromJSON,
  ResetPassModelToJSON,
} from '../models';

export interface AuthConfirmEmailPostRequest {
  token: string;
}

export interface AuthForgotPasswordPostRequest {
  forgotPassModel?: ForgotPassModel;
}

export interface AuthLoginPostRequest {
  loginModel?: LoginModel;
}

export interface AuthRegisterPostRequest {
  registerModel?: RegisterModel;
}

export interface AuthResetForgotPasswordPostRequest {
  resetForgotPassModel?: ResetForgotPassModel;
}

export interface AuthResetPasswordPostRequest {
  resetPassModel?: ResetPassModel;
}

/**
 *
 */
export class AuthApi extends runtime.BaseAPI {
  /**
   * Confirms user\'s e-mail
   */
  async authConfirmEmailPostRaw(
    requestParameters: AuthConfirmEmailPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.token === null ||
      requestParameters.token === undefined
    ) {
      throw new runtime.RequiredError(
        'token',
        'Required parameter requestParameters.token was null or undefined when calling authConfirmEmailPost.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.token !== undefined) {
      queryParameters['token'] = requestParameters.token;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('Bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/Auth/confirm-email`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Confirms user\'s e-mail
   */
  async authConfirmEmailPost(
    requestParameters: AuthConfirmEmailPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.authConfirmEmailPostRaw(requestParameters, initOverrides);
  }

  /**
   * Sends forgot password e-mail to the user
   */
  async authForgotPasswordPostRaw(
    requestParameters: AuthForgotPasswordPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('Bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/Auth/forgot-password`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ForgotPassModelToJSON(requestParameters.forgotPassModel),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Sends forgot password e-mail to the user
   */
  async authForgotPasswordPost(
    requestParameters: AuthForgotPasswordPostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.authForgotPasswordPostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Authenticates user in the system using JWT
   */
  async authLoginPostRaw(
    requestParameters: AuthLoginPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<JwtResult>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('Bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/Auth/login`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: LoginModelToJSON(requestParameters.loginModel),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      JwtResultFromJSON(jsonValue),
    );
  }

  /**
   * Authenticates user in the system using JWT
   */
  async authLoginPost(
    requestParameters: AuthLoginPostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<JwtResult> {
    const response = await this.authLoginPostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Registers user in the system
   */
  async authRegisterPostRaw(
    requestParameters: AuthRegisterPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<JwtResult>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('Bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/Auth/register`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: RegisterModelToJSON(requestParameters.registerModel),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      JwtResultFromJSON(jsonValue),
    );
  }

  /**
   * Registers user in the system
   */
  async authRegisterPost(
    requestParameters: AuthRegisterPostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<JwtResult> {
    const response = await this.authRegisterPostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Resends e-mail confirmation message to the user
   */
  async authResendConfirmationGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('Bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/Auth/resend-confirmation`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Resends e-mail confirmation message to the user
   */
  async authResendConfirmationGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.authResendConfirmationGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Resets user\'s password by using a reset token from e-mail
   */
  async authResetForgotPasswordPostRaw(
    requestParameters: AuthResetForgotPasswordPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('Bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/Auth/reset-forgot-password`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ResetForgotPassModelToJSON(
          requestParameters.resetForgotPassModel,
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Resets user\'s password by using a reset token from e-mail
   */
  async authResetForgotPasswordPost(
    requestParameters: AuthResetForgotPasswordPostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.authResetForgotPasswordPostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Resets user\'s password by using his current password
   */
  async authResetPasswordPostRaw(
    requestParameters: AuthResetPasswordPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<object>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('Bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/Auth/reset-password`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ResetPassModelToJSON(requestParameters.resetPassModel),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Resets user\'s password by using his current password
   */
  async authResetPasswordPost(
    requestParameters: AuthResetPasswordPostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<object> {
    const response = await this.authResetPasswordPostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   */
  async authTestGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<string>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('Bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/Auth/test`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.TextApiResponse(response) as any;
  }

  /**
   */
  async authTestGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<string> {
    const response = await this.authTestGetRaw(initOverrides);
    return await response.value();
  }
}
